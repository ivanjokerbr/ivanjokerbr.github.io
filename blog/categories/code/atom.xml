<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Joker's InfoSec Articles]]></title>
  <link href="http://ivanjokerbr.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://ivanjokerbr.github.io/"/>
  <updated>2014-08-29T08:48:19-03:00</updated>
  <id>http://ivanjokerbr.github.io/</id>
  <author>
    <name><![CDATA[Ivan "Joker"]]></name>
    <email><![CDATA[ivanjokerbr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First Blog]]></title>
    <link href="http://ivanjokerbr.github.io/blog/2014/08/06/first-blog/"/>
    <updated>2014-08-06T15:03:02-03:00</updated>
    <id>http://ivanjokerbr.github.io/blog/2014/08/06/first-blog</id>
    <content type="html"><![CDATA[<p>For this first entry, I have decided to talk about some old work I&rsquo;ve done. Namely, my PhD Thesis. Basically, I&rsquo;ve developed a PoC tool for doing static analysis of concurrent component based Java code , that could check for inconsistencies. To do so, a control flow graph of the Java statements, not bytecodes, was created. Then, all relevent API methods were linked and analysis. Most inconsistencies could be detected by analyzing the control flow between them.</p>

<p>If you are curious, check <a href="https://github.com/ivanjokerbr/Miscelanea/blob/master/ivanTheses.pdf?raw=true">here</a> for a copy of the text.</p>

<p>What can I conclude from my work ? 1) Static analysis is hard :&ndash;) 2) A lot of useful checks can be done statically. Regarding code review, these type of tools are a great allie.</p>
]]></content>
  </entry>
  
</feed>
