<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code Review | Joker's InfoSec Articles]]></title>
  <link href="http://ivanjokerbr.github.io/blog/categories/code-review/atom.xml" rel="self"/>
  <link href="http://ivanjokerbr.github.io/"/>
  <updated>2014-08-29T09:42:35-03:00</updated>
  <id>http://ivanjokerbr.github.io/</id>
  <author>
    <name><![CDATA[Ivan "Joker"]]></name>
    <email><![CDATA[ivanjokerbr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From the Land of the Rising Sun]]></title>
    <link href="http://ivanjokerbr.github.io/blog/2014/08/29/from-the-land-of-the-rising-sun/"/>
    <updated>2014-08-29T08:41:21-03:00</updated>
    <id>http://ivanjokerbr.github.io/blog/2014/08/29/from-the-land-of-the-rising-sun</id>
    <content type="html"><![CDATA[<p>Right know I&rsquo;m working on developing a benchmark suite of vulnerable Android apps for the sake of code review and teaching secure codding. Well, the first thing of course is listing all possible pitfalls a programming might fall. Compiling this information from multiple sources, I have just jumble across a nice document on the subject. Is from the Japan Smartphone Security Association and was released this year. The website in all in Japanese, but hey, there this <a href="http://www.jssec.org/dl/android_securecoding_en.pdf">Secure Coding Guidebook</a>. Cool stuff. Check it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Blog]]></title>
    <link href="http://ivanjokerbr.github.io/blog/2014/08/06/first-blog/"/>
    <updated>2014-08-06T15:03:02-03:00</updated>
    <id>http://ivanjokerbr.github.io/blog/2014/08/06/first-blog</id>
    <content type="html"><![CDATA[<p>For this first entry, I have decided to talk about some old work I&rsquo;ve done. Namely, my PhD Thesis. Basically, I&rsquo;ve developed a PoC tool for doing static analysis of concurrent component based Java code , that could check for inconsistencies. To do so, a control flow graph of the Java statements, not bytecodes, was created. Then, all relevent API methods were linked and analysis. Most inconsistencies could be detected by analyzing the control flow between them.</p>

<p>If you are curious, check <a href="https://github.com/ivanjokerbr/Miscelanea/blob/master/ivanTheses.pdf?raw=true">here</a> for a copy of the text.</p>

<p>What can I conclude from my work ? 1) Static analysis is hard :&ndash;) 2) A lot of useful checks can be done statically. Regarding code review, these type of tools are a great allie.</p>
]]></content>
  </entry>
  
</feed>
