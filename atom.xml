<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joker's InfoSec Articles]]></title>
  <link href="http://ivanjokerbr.github.io/atom.xml" rel="self"/>
  <link href="http://ivanjokerbr.github.io/"/>
  <updated>2014-08-06T17:50:32-03:00</updated>
  <id>http://ivanjokerbr.github.io/</id>
  <author>
    <name><![CDATA[Ivan "Joker"]]></name>
    <email><![CDATA[ivanjokerbr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android MITM]]></title>
    <link href="http://ivanjokerbr.github.io/blog/2014/09/06/android-mitm/"/>
    <updated>2014-09-06T15:37:38-03:00</updated>
    <id>http://ivanjokerbr.github.io/blog/2014/09/06/android-mitm</id>
    <content type="html"><![CDATA[<p>When I read about <a href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2012-6636">CVE 2012-6636</a> two things came to my mind: what executable (javascript) code can we inject? and what can we do messing with the xml/json/html etc being transmitted. Thinking for a few minutes and a bigger question arouse: do developers validate their data? I mean, servers can be compromised, traffic intercepted, bugs of all sorts.</p>

<p>So I went on and spend some weeks on this issue. To do so, these are the necessary tools:</p>

<p>1.<a href="http://developer.android.com/sdk/index.html">Android SDK</a> of course
2.<a href="http://mitmproxy.org/">mitmproxy</a> for intercepting requests and responses
3.<a href="code.google.com/p/android-apktool/">Apktool</a> for decompiling the apks
4.<a href="github.com/egirault/googleplay-api.git">Google Play API</a>, which is not an official google api, for downloading some apps</p>

<p>First of all, I was interested in Brazilian apps, codded and deployed by brazilian programmers &amp; firms. So, no facebook, whatapps etc.</p>

<p>mitmproxy is pretty cool, cause you can hook a Python script to process all request and responses. mitm attacks normally are employed for grabbing data from the user to the net. Some examples that I found grabbed plaintext passwords, cookies , etc. I was more into using mitmproxy&rsquo;s script engine to alter the response from the server, and watching if the app would complain.</p>

<p>What I have found out ? Not one app validates its data. They all assume that what is received is crystal clear. No bad guy in the middle. I have done three payload examples:</p>

<p>blocking content and displaying a false &ldquo;update your app&rdquo; type of social scan for malware delivery
injecting javascript for the above CVE
changing links to bad guys website</p>

<p>I gave a presentation of these findings in BSides last July. You can check the slides <a href="http://www.slideshare.net/ivanjokerbr/">here</a>.</p>

<p>Oh! Https of course. This is the only way to prevent data manipulation. But even for apps with sensitive data, http transfers are used, and thus, may be a pathway to compromise. So developers, watch out and carry more for your data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Blog]]></title>
    <link href="http://ivanjokerbr.github.io/blog/2014/08/06/first-blog/"/>
    <updated>2014-08-06T15:03:02-03:00</updated>
    <id>http://ivanjokerbr.github.io/blog/2014/08/06/first-blog</id>
    <content type="html"><![CDATA[<p>For this first entry, I have decided to talk about some old work I&rsquo;ve done. Namely, my PhD Thesis. PhD thesis can be very frustrating, you work hard for 3, 4 years just to have some pages stored in a dusty bookshelf and a couple of technical articles published. If you are lucky, perhaps be part of a bigger team that is moving towards something useful. Here in Brazil, and several other places this is the reality, I think.</p>

<p>Back then I wasn&rsquo;t part of any &ldquo;great team&rdquo;, actually it was only me (advisor was a moron), so I tried to do something useful that could last a little longer. Basically, I&rsquo;ve developed a PoC tool for doing static analysis on Java code , that could check for inconsistencies in concurrent models. I based my work on the Ptolemy project (ptolemy.eecs.berkeley.edu).</p>

<p>If you are curious, check <a href="https://github.com/ivanjokerbr/Miscelanea/blob/master/ivanTheses.pdf?raw=true">here</a> for a copy of the text.</p>

<p>What can I conclude from my work ? 1) Static analysis is hard :&ndash;) 2) A lot of useful checks can be done statically. Regarding code review, these type of tools are a great allie.</p>
]]></content>
  </entry>
  
</feed>
